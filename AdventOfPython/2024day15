
from google.colab import files

def move_robot(crates,obstacles,direction,x,y):
    #if there is an obstacle, return false
    #if there is a crate in that direction, call move_crate
    #otherwise move one step
    new_x = x
    new_y = y
    if direction == '<':
      new_x = x - 1
    elif direction == '^':
      new_y = y - 1
    elif direction == '>':
      new_x = x + 1
    elif direction == 'v':
      new_y = y + 1
    
    if (new_x, new_y) in obstacles:
      return x,y #can't move due to obstacle in the way
    if (new_x, new_y) in crates:
      if move_crate(crates,obstacles,new_x, new_y, direction):
        return new_x, new_y # move with crate(s)
      else: 
        return x,y #can't move since the crate is blocked
    return new_x, new_y # moved

def move_crate(crates,obstacles,x,y,direction):
    #if there is another crate in that direction, 
    #if move_crate(that crate) == True
    #then move this also and return True
    # if there is an obstacle, return false
    # else move and return true
    #print("Moving crate from", (x, y), " using ", direction)
    new_x = x
    new_y = y
    if direction == '<':
      new_x = x - 1
    elif direction == '^':
      new_y = y - 1
    elif direction == '>':
      new_x = x + 1
    elif direction == 'v':
      new_y = y + 1
    
    if (new_x, new_y) in obstacles:
      return False #can't move due to obstacle in the way
    if (new_x, new_y) in crates:
      if move_crate(crates,obstacles,new_x, new_y, direction):
        crates[(new_x, new_y)] = crates.pop((x, y))
        return True # move with crate(s)
      else:
        return False #can't move since the crate is blocked
    crates[(new_x, new_y)] = crates.pop((x, y))
    return True

def play(steps,crates,obstacles,x,y):
    for step in steps:
        x,y = move_robot(crates,obstacles,step,x,y)

def calculateGPS(crates):
    GPS = 0
    for crate in crates:
        GPS += crate[0] + crate[1] * 100
    return GPS

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

  crates = {}
  obstacles = {}
  steps = []
  x = None
  y = None
  with open(fn, 'r') as f:
    for i, line in enumerate(f):
      for j, char in enumerate(line):
        if char == '#':
          obstacles[(j, i)] = 1
        elif char == 'O':
          crates[(j, i)] = 1
        elif char == '@':
          x = i
          y = j
        elif char in ['<', '^', '>', 'v']:
          steps.append(char)

  play(steps, crates, obstacles, x, y)    
  answerPart1 = calculateGPS(crates)
  print("Answer part 1:", answerPart1)
  
